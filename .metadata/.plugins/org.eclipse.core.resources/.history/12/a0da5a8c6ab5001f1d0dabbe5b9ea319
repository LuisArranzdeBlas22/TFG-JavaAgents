package com.luis.tfg.security;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StateMachine {
    private final Map<String, State> states = new HashMap<>();
    private State currentState;
    private final Map<String, String> logicalToUuidMap = new HashMap<>(); // Mapeo lógico-UUID

    public StateMachine(String regex) {
        System.out.println("[INFO] Initializing StateMachine with regex: " + regex);
        parseRegex(regex);
        debugTransitions(); 
    }
    
    private void debugTransitions() {
        System.out.println("[DEBUG] Complete StateMachine transitions:");
        for (Map.Entry<String, State> entry : states.entrySet()) {
            System.out.println("State " + entry.getKey() + " transitions to: " + entry.getValue().getTransitions());
        }
    }

    private void parseRegex(String regex) {
        boolean usesArrowSyntax = regex.contains("->");

        // Separar estados dependiendo del formato
        String[] parts = usesArrowSyntax ? regex.split("->") : regex.split("\\s+");

        if (parts.length < 2) {
            throw new IllegalArgumentException("[ERROR] Invalid regex format. Expected 'sequence -> target' or 'sequence'. Got: " + regex);
        }

        // Crear estado inicial y final explícito
        State initialState = states.computeIfAbsent("INITIAL", id -> new State(id, false, 0, id));
        State finalExplicitState = states.computeIfAbsent("FINAL", id -> new State(id, true, 0, id));

        // Identificar el estado final declarado
        String finalStateId = cleanStateId(parts[parts.length - 1].trim());
        State finalDeclaredState = states.computeIfAbsent(finalStateId, id -> new State(id, true, 0, id));

        // Variables auxiliares para manejar transiciones
        State previousState = initialState;

        for (int i = 0; i < parts.length; i++) {
            String segment = parts[i].trim();
            if (segment.isEmpty()) continue;

            // Identificar el siguiente estado (si existe)
            State nextState = (i < parts.length - 1)
                    ? states.computeIfAbsent(cleanStateId(parts[i + 1].trim()), id -> new State(id, false, 0, id))
                    : finalDeclaredState;

            // Manejo de operadores complejos
            if (segment.contains("&") || segment.contains("|") || segment.matches(".*\\{\\d+}.*")) {
                System.out.println("[DEBUG] Handling complex segment: " + segment);

                // Procesar combinaciones AND-OR
                if (segment.contains("&") && segment.contains("|")) {
                    handleAndOrCombination(previousState, nextState, segment);
                    continue;
                }

                // Procesar condición AND
                if (segment.contains("&")) {
                    handleAndCondition(previousState, nextState, segment);
                    continue;
                }

                // Procesar repetición
                if (segment.matches(".*\\{\\d+}.*")) {
                    handleRepetition(previousState, nextState, segment);
                    continue;
                }

                // Procesar condición OR
                if (segment.contains("|")) {
                    handleOrCondition(previousState, nextState, segment);
                    continue;
                }
            }

            // Procesar transiciones simples (lineales)
            String[] subStates = segment.split("\\s+");
            for (String subState : subStates) {
                String cleanedStateId = cleanStateId(subState);
                boolean isFinalState = cleanedStateId.equals(finalStateId);

                State currentState = states.computeIfAbsent(cleanedStateId, id -> new State(id, isFinalState, 0, cleanedStateId));

                if (previousState == initialState) {
                    initialState.addTransition(currentState);
                } else {
                    previousState.addTransition(currentState);
                }

                previousState = currentState; // Actualizar estado previo
            }
        }

        // Conectar el último estado al estado final explícito, solo si no está ya conectado
        if (!previousState.equals(initialState) && !previousState.hasTransitionTo(finalExplicitState.getId())) {
            previousState.addTransition(finalExplicitState);
        }

        // Eliminar cualquier transición redundante hacia `FINAL` desde `INITIAL`
        initialState.getTransitions().removeIf(state -> state.equals(finalExplicitState));

        // Asegurar que el estado final explícito no tenga transiciones salientes
        finalExplicitState.getTransitions().clear();

        // Log transiciones
        System.out.println("[INFO] Transitions configured:");
        for (Map.Entry<String, State> entry : states.entrySet()) {
            System.out.println("    " + entry.getKey() + " -> " + entry.getValue().getTransitions());
        }

        // Asegurar que el estado inicial es el estado actual
        this.currentState = initialState;
    }
    
    private void handleAndOrCombination(State initialState, State finalState, String segment) {
        String[] orSegments = segment.split("\\|");
        for (String orSegment : orSegments) {
            orSegment = orSegment.trim();

            if (orSegment.contains("&")) {
                handleAndCondition(initialState, finalState, orSegment);
            } else {
                String cleanedStateId = cleanStateId(orSegment);
                State intermediateState = states.computeIfAbsent(cleanedStateId, id -> new State(id, false, 0, cleanedStateId));

                initialState.addTransition(intermediateState);

                // Conectar el estado intermedio al flujo principal
                if (!finalState.equals(intermediateState)) {
                    intermediateState.addTransition(finalState);
                }
            }
        }
    }


    
    private void handleRepetition(State initialState, State finalState, String segment) {
        Matcher matcher = Pattern.compile("\\(([^)]+)\\)\\{(\\d+)}").matcher(segment);
        if (!matcher.matches()) {
            throw new IllegalArgumentException("[ERROR] Invalid repetition syntax in: " + segment);
        }

        // Extraer el nombre del estado y el número de repeticiones
        String repeatedStateName = matcher.group(1).trim();
        int repetitions = Integer.parseInt(matcher.group(2));

        State previousState = initialState;

        // Crear los estados intermedios para las repeticiones
        for (int i = 1; i <= repetitions; i++) {
            String stateId = repeatedStateName + "_rep" + i;
            State repeatedState = new State(stateId, false, 0, repeatedStateName);
            states.put(stateId, repeatedState);

            // Conectar el estado anterior con el actual
            previousState.addTransition(repeatedState);

            // Actualizar el estado previo
            previousState = repeatedState;
        }

        // Conectar el último estado repetido con el estado final
        previousState.addTransition(finalState);

        // Eliminar transiciones innecesarias desde `INITIAL`
        initialState.getTransitions().removeIf(state -> state.equals(finalState));

        // Debug de transiciones configuradas para la repetición
        System.out.println("[DEBUG] State transitions for repetition:");
        System.out.println("  " + initialState.getName() + " -> [" + repeatedStateName + "_rep1]");
        for (int i = 1; i < repetitions; i++) {
            System.out.println("  " + repeatedStateName + "_rep" + i + " -> [" + repeatedStateName + "_rep" + (i + 1) + "]");
        }
        System.out.println("  " + repeatedStateName + "_rep" + repetitions + " -> [" + finalState.getName() + "]");
    }
    
    private void handleOrCondition(State initialState, State nextState, String segment) {
        String[] subStates = segment.split("\\|");
        if (subStates.length < 2) {
            throw new IllegalArgumentException("[ERROR] Invalid OR syntax in: " + segment);
        }

        for (String subState : subStates) {
            String cleanedSubState = cleanStateId(subState.trim());

            // Crear o recuperar el estado intermedio (start o process)
            State intermediateState = states.computeIfAbsent(cleanedSubState, id -> new State(id, false, 0, cleanedSubState));

            // Conectar el estado inicial al estado intermedio
            initialState.addTransition(intermediateState);

            // Conectar al siguiente estado intermedio si no es FINAL
            if (!"FINAL".equals(nextState.getId())) {
                intermediateState.addTransition(nextState);
            } else {
                // Conectar directamente al estado FINAL si es el caso
                State finalState = states.computeIfAbsent("FINAL", id -> new State(id, true, 0, id));
                intermediateState.addTransition(finalState);
            }

            // Debugging para cada transición
            System.out.println("[DEBUG] OR condition: " + initialState.getName() + " -> [" + intermediateState.getName() + "]");
            System.out.println("[DEBUG] " + intermediateState.getName() + " -> [" + nextState.getName() + "]");
        }
    }
    
    private void handleAndCondition(State initialState, State finalState, String segment) {
        String[] subStates = segment.split("&");
        if (subStates.length != 2) {
            throw new IllegalArgumentException("[ERROR] Invalid AND syntax in: " + segment);
        }

        // Extraer nombres lógicos
        String subStateA = cleanStateId(subStates[0].trim());
        String subStateB = cleanStateId(subStates[1].trim());

        // Crear estados base
        State startState = states.computeIfAbsent(subStateA, id -> new State(subStateA, false, 1, subStateA));
        State processState = states.computeIfAbsent(subStateB, id -> new State(subStateB, false, 1, subStateB));

        // Crear estados intermedios (opcional)
        State intermediateStateA = new State(UUID.randomUUID().toString(), false, 0, subStateA);
        State intermediateStateB = new State(UUID.randomUUID().toString(), false, 0, subStateB);
        states.putIfAbsent(intermediateStateA.getId(), intermediateStateA);
        states.putIfAbsent(intermediateStateB.getId(), intermediateStateB);

        // Transiciones para el caso AND:
        // Camino 1: INITIAL -> startState -> intermediateStateB -> finalState
        initialState.addTransition(startState);
        startState.addTransition(intermediateStateB);
        intermediateStateB.addTransition(finalState);

        // Camino 2: INITIAL -> processState -> intermediateStateA -> finalState
        initialState.addTransition(processState);
        processState.addTransition(intermediateStateA);
        intermediateStateA.addTransition(finalState);

        // Registrar mapeo lógico -> ID
        logicalToUuidMap.put(subStateA, startState.getId());
        logicalToUuidMap.put(subStateB, processState.getId());

        // Debug de transiciones
        System.out.println("[DEBUG] AND-Condition Transitions Configured:");
        System.out.println("  INITIAL -> [" + startState.getName() + ", " + processState.getName() + "]");
        System.out.println("  " + startState.getName() + " -> [" + intermediateStateB.getName() + "]");
        System.out.println("  " + processState.getName() + " -> [" + intermediateStateA.getName() + "]");
        System.out.println("  " + intermediateStateB.getName() + ", " + intermediateStateA.getName() + " -> [end]");
    }


    
    private String cleanStateId(String stateId) {
        return stateId.replaceAll("[(){}]", "").replaceAll("\\{\\d+}", "").trim();
    }

    public boolean validateTransition(String methodName) {
        // Traducir nombres lógicos a UUIDs si están en el mapeo
        String tempMethodName = cleanStateId(methodName);
        final String cleanedMethodName;

        if (logicalToUuidMap.containsKey(tempMethodName)) {
            cleanedMethodName = logicalToUuidMap.get(tempMethodName);
        } else {
            cleanedMethodName = tempMethodName;
        }

        if (currentState == null) {
            throw new IllegalStateException("[ERROR] StateMachine not initialized properly");
        }

        // Si estamos en el estado FINAL, bloquear todas las transiciones
        if (currentState.getId().equals("FINAL")) {
            System.out.println("[ERROR] Transition attempted from final state: FINAL");
            throw new IllegalStateException("[ERROR] Cannot transition from final state: FINAL");
        }

        // Validar transiciones desde estados finales declarados
        if (currentState.isFinalState() && !currentState.getId().equals("FINAL")) {
            if (currentState.hasTransitionTo("FINAL")) {
                System.out.println("[INFO] Transition from declared final state to FINAL is explicitly allowed.");
                currentState = states.get("FINAL");
                return true;
            } else {
                throw new IllegalStateException("[ERROR] Cannot transition from declared final state: " + currentState.getId());
            }
        }

        // Validar la transición como en estados normales
        for (State targetState : currentState.getTransitions()) {
            // Permitir transición si es un comodín (.*)
            if (targetState.getName().equals(".*")) {
                System.out.println("[INFO] Wildcard transition valid from " + currentState.getId() + " to " + cleanedMethodName);
                currentState = targetState;
                return true;
            }

            // Validar si coincide con el nombre lógico o el ID
            if (targetState.getId().equals(cleanedMethodName) || targetState.getName().equals(methodName)) {
                currentState = targetState;
                System.out.println("[INFO] Transition valid. Current state updated to: " + currentState.getId());
                return true;
            }
        }

        // Si no hay transición válida, lanzar excepción
        throw new IllegalStateException("[ERROR] Invalid transition from " + currentState.getId() + " to " + cleanedMethodName + ".");
    }

    public boolean isInFinalState() {
        if (currentState == null) {
            return false; // No hay estado actual, no puede ser final
        }
        // Verificar si el estado actual es FINAL o tiene una transición directa hacia FINAL
        return "FINAL".equals(currentState.getId()) || currentState.hasTransitionTo("FINAL");
    }

    public Map<String, List<String>> getTransitions() {
        Map<String, List<String>> transitionsMap = new HashMap<>();
        for (State state : states.values()) {
            List<State> outgoingTransitions = state.getTransitions();
            
            // Excluir estados sin transiciones salientes (como FINAL)
            if (!outgoingTransitions.isEmpty()) {
                List<String> targetStates = new ArrayList<>();
                for (State target : outgoingTransitions) {
                    targetStates.add(target.getId());
                }
                transitionsMap.put(state.getId(), targetStates);
            }
        }
        return transitionsMap;
    }
    
    public State getCurrentState() {
        return this.currentState;
    }
}