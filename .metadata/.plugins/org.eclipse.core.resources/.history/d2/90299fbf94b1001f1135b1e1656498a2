package com.luis.tfg.security;

import java.util.*;

public class StateMachine {
    private final Map<String, Set<String>> transitions = new HashMap<>();
    private final String finalState;
    private final Map<String, Integer> executionCounts = new HashMap<>();
    private String currentState = null;

    public StateMachine(String regex) {
        System.out.println("[INFO] Initializing StateMachine with regex: " + regex);

        // Construir las transiciones a partir del regex
        parseRegex(regex);

        // Determinar el estado final
        this.finalState = determineFinalState(regex);
        System.out.println("[INFO] StateMachine initialized with transitions: " + transitions + ", finalState: " + finalState);
    }

    private void parseRegex(String regex) {
        // Manejar secuencias con OR (|) y AND (&)
        if (regex.contains("&") || regex.contains("|")) {
            handleComplexConditions(regex);
        } else if (regex.contains(".*")) {
            handleFlexibleSequence(regex);
        } else if (regex.contains("{")) {
            handleRepetitions(regex);
        } else {
            handleStrictSequence(regex);
        }
    }

    private void handleStrictSequence(String regex) {
        String[] states = regex.replaceAll("[()]", "").split(" ");
        for (int i = 0; i < states.length - 1; i++) {
            transitions.computeIfAbsent(states[i], k -> new HashSet<>()).add(states[i + 1]);
        }
    }

    private void handleFlexibleSequence(String regex) {
        String[] parts = regex.split(".*");
        for (int i = 0; i < parts.length - 1; i++) {
            transitions.computeIfAbsent(parts[i].trim(), k -> new HashSet<>()).add(parts[i + 1].trim());
        }
    }

    private void handleComplexConditions(String regex) {
        String[] conditions = regex.split("->");
        String[] preconditions = conditions[0].replace("(", "").replace(")", "").split("&|\\|");
        String targetState = conditions[1].trim();

        for (String pre : preconditions) {
            transitions.computeIfAbsent(pre.trim(), k -> new HashSet<>()).add(targetState);
        }
    }

    private void handleRepetitions(String regex) {
        String[] parts = regex.split("->");
        String state = parts[0].replaceAll("\\{.*?\\}", "").trim();
        String targetState = parts[1].trim();

        transitions.computeIfAbsent(state, k -> new HashSet<>()).add(targetState);

        String repetitionCount = parts[0].substring(parts[0].indexOf("{") + 1, parts[0].indexOf("}"));
        executionCounts.put(state, Integer.parseInt(repetitionCount));
    }

    private String determineFinalState(String regex) {
        String[] states = regex.replaceAll("[()]", "").split(" ");
        return states[states.length - 1];
    }

    public boolean validateTransition(String methodName) {
        System.out.println("[INFO] Validating transition for method: " + methodName);

        // Si no hay un estado actual y el método no es un estado inicial válido
        if (currentState == null) {
            if (!transitions.containsKey(methodName)) {
                System.out.println("[ERROR] Invalid starting state: " + methodName);
                throw new IllegalStateException("Invalid starting state: " + methodName);
            }
            currentState = methodName;
            System.out.println("[INFO] Transition valid. Current state set to: " + currentState);
            return true;
        }

        // Obtener las transiciones válidas para el estado actual
        Set<String> validTransitions = transitions.get(currentState);
        if (validTransitions != null && validTransitions.contains(methodName)) {
            currentState = methodName;
            if (executionCounts.containsKey(methodName)) {
                executionCounts.put(methodName, executionCounts.get(methodName) - 1);
                if (executionCounts.get(methodName) == 0) {
                    executionCounts.remove(methodName);
                }
            }
            System.out.println("[INFO] Transition valid. Current state updated to: " + currentState);
            return true;
        }

        // Si la transición no es válida, lanza una excepción
        System.out.println("[ERROR] Transition invalid from " + currentState + " to " + methodName);
        throw new IllegalStateException("Invalid transition from " + currentState + " to " + methodName);
    }
    public boolean isInFinalState() {
        return finalState.equals(currentState) && executionCounts.isEmpty();
    }

    public String getCurrentState() {
        return currentState;
    }

    public Map<String, Set<String>> getTransitions() {
        return transitions;
    }
}	